// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id             String       @id @default(uuid())
  firstName      String
  lastName       String
  email          String       @unique
  profilePicture String?
  phoneNo        String?
  role           UserRole     @default(USER)
  tokenBalance   Float        @default(0)
  submissions    Submission[]
  projects       Project[]    // Only for admins
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

enum UserRole {
  USER
  ADMIN
}

model Project {
  id          String       @id @default(uuid())
  name        String
  admin       User         @relation(fields: [adminId], references: [id])
  adminId     String
  projectType ProjectType?
  submissions Submission[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model ProjectType {
  id        String   @id @default(uuid())
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String   @unique
  fields    Field[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Field {
  id            String            @id @default(uuid())
  name          String
  type          FieldType
  question      String?
  projectType   ProjectType       @relation(fields: [projectTypeId], references: [id])
  projectTypeId String
  submissions   FieldSubmission[]
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

enum FieldType {
  FILE
  QUESTION
}

model Submission {
  id        String             @id @default(uuid())
  user      User               @relation(fields: [userId], references: [id])
  userId    String
  project   Project            @relation(fields: [projectId], references: [id])
  projectId String
  status    SubmissionStatus   @default(PENDING)
  fields    FieldSubmission[]
  tokens    Float?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model FieldSubmission {
  id           String     @id @default(uuid())
  field        Field      @relation(fields: [fieldId], references: [id])
  fieldId      String
  submission   Submission @relation(fields: [submissionId], references: [id])
  submissionId String
  answer       String?
  fileUrl      String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

enum SubmissionStatus {
  PENDING
  INITIALIZED
  PROCESSING
  COMPLETED
}
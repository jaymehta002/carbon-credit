// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  firstName      String
  lastName       String
  email          String    @unique
  profilePicture String?
  phoneNo        String?
  role           UserRole  @default(USER)
  tokenBalance   Float     @default(0)
  projects       Project[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

enum UserRole {
  USER
  ADMIN
}

model ProjectCategory {
  id        String    @id @default(uuid())
  name      String    @unique
  fields    Field[]
  projects  Project[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Field {
  id                String          @id @default(uuid())
  name              String?
  type              FieldType
  question          String?
  projectCategory   ProjectCategory @relation(fields: [projectCategoryId], references: [id])
  projectCategoryId String
  projectFields     ProjectField[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

enum FieldType {
  FILE
  QUESTION
}

model Project {
  id                String          @id @default(uuid())
  user              User            @relation(fields: [userId], references: [id])
  userId            String
  projectCategory   ProjectCategory @relation(fields: [projectCategoryId], references: [id])
  projectCategoryId String
  status            ProjectStatus   @default(PENDING)
  fields            ProjectField[]
  tokens            Float?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model ProjectField {
  id        String   @id @default(uuid())
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  field     Field    @relation(fields: [fieldId], references: [id])
  fieldId   String
  answer    String?
  fileUrl   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([projectId, fieldId])
}

enum ProjectStatus {
  PENDING
  INITIALIZED
  PROCESSING
  COMPLETED
}